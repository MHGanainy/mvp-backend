generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  email      String  @unique
  name       String?
  
  // Relationships (one-to-one)
  instructor Instructor?
  student    Student?
  
  @@map("users")
}

model Instructor {
  id        String   @id @default(uuid())
  userId    Int      @unique @map("user_id")
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  bio       String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relationships
  user    User     @relation(fields: [userId], references: [id])
  exams   Exam[]   // One instructor can create many exams
  courses Course[] // One instructor can create many courses
  
  @@map("instructors")
}

model Student {
  id               String              @id @default(uuid())
  userId           Int                 @unique @map("user_id")
  firstName        String              @map("first_name")
  lastName         String              @map("last_name")
  dateOfBirth      DateTime            @map("date_of_birth") @db.Date
  creditBalance    Int                 @default(0) @map("credit_balance")
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")
  
  // Relationships
  user               User                @relation(fields: [userId], references: [id])
  simulationAttempts SimulationAttempt[] // One student has many attempts
  
  @@map("students")
}

model Exam {
  id           String   @id @default(uuid())
  instructorId String   @map("instructor_id")
  title        String
  slug         String   @unique
  description  String?
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Relationships
  instructor Instructor @relation(fields: [instructorId], references: [id])
  courses    Course[]   // One exam can have many courses
  
  @@map("exams")
}

model Course {
  id              String      @id @default(uuid())
  examId          String      @map("exam_id")
  instructorId    String      @map("instructor_id")
  title           String
  description     String?
  style           CourseStyle @default(RANDOM)
  price3Months    Decimal     @map("price_3_months") @db.Decimal(10,2)
  price6Months    Decimal     @map("price_6_months") @db.Decimal(10,2)
  price12Months   Decimal     @map("price_12_months") @db.Decimal(10,2)
  credits3Months  Int         @map("credits_3_months")
  credits6Months  Int         @map("credits_6_months")
  credits12Months Int         @map("credits_12_months")
  isPublished     Boolean     @default(false) @map("is_published")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  
  // Relationships
  exam        Exam         @relation(fields: [examId], references: [id])
  instructor  Instructor   @relation(fields: [instructorId], references: [id])
  courseCases CourseCase[] // One course has many cases
  
  @@map("courses")
}

model CourseCase {
  id           String        @id @default(uuid())
  courseId     String        @map("course_id")
  title        String
  diagnosis    String
  patientName  String        @map("patient_name")
  patientAge   Int           @map("patient_age")
  patientGender PatientGender @map("patient_gender")
  description  String
  isFree       Boolean       @default(false) @map("is_free")
  displayOrder Int           @map("display_order")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  
  // Relationships
  course     Course      @relation(fields: [courseId], references: [id])
  simulation Simulation? // One CourseCase has one optional Simulation
  
  @@map("course_cases")
}

model Simulation {
  id                  String   @id @default(uuid())
  courseCaseId        String   @unique @map("course_case_id")
  casePrompt          String   @map("case_prompt") @db.Text
  openingLine         String   @map("opening_line")
  timeLimitMinutes    Int      @map("time_limit_minutes")
  voiceModel          VoiceModel @map("voice_model")
  warningTimeMinutes  Int?     @map("warning_time_minutes")
  creditCost          Int      @default(1) @map("credit_cost")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  
  // Relationships
  courseCase         CourseCase         @relation(fields: [courseCaseId], references: [id])
  simulationAttempts SimulationAttempt[] // One simulation can have many attempts
  
  @@map("simulations")
}

model SimulationAttempt {
  id              String    @id @default(uuid())
  studentId       String    @map("student_id")
  simulationId    String    @map("simulation_id")
  startedAt       DateTime  @map("started_at")
  endedAt         DateTime? @map("ended_at")
  durationSeconds Int?      @map("duration_seconds")
  isCompleted     Boolean   @default(false) @map("is_completed")
  score           Decimal?  @db.Decimal(5,2)
  aiFeedback      Json?     @map("ai_feedback")
  transcript      Json?
  createdAt       DateTime  @default(now()) @map("created_at")
  
  // Relationships
  student    Student    @relation(fields: [studentId], references: [id])
  simulation Simulation @relation(fields: [simulationId], references: [id])
  
  @@map("simulation_attempts")
}

enum CourseStyle {
  RANDOM
  STRUCTURED
}

enum PatientGender {
  MALE
  FEMALE
  OTHER
}

enum VoiceModel {
  VOICE_1
  VOICE_2
}

model Specialty {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("specialties")
}

model Curriculum {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("curriculums")
}

model MarkingDomain {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("marking_domains")
}
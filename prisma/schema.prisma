generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  email         String      @unique
  name          String?
  createdAt     DateTime    @default(now()) @map("created_at")
  emailVerified Boolean     @default(true) @map("email_verified")
  passwordHash  String?     @map("password_hash")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  instructor    Instructor?
  student       Student?

  @@map("users")
}

model Instructor {
  id        String   @id @default(uuid())
  userId    Int      @unique @map("user_id")
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  bio       String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  courses   Course[]
  exams     Exam[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("instructors")
}

model Student {
  id                 String              @id @default(uuid())
  userId             Int                 @unique @map("user_id")
  firstName          String              @map("first_name")
  lastName           String              @map("last_name")  
  creditBalance      Int                 @default(0) @map("credit_balance")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  creditTransactions CreditTransaction[]
  payments           Payment[]
  simulationAttempts SimulationAttempt[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptions      Subscription[]

  @@map("students")
}

model Exam {
  id                 String              @id @default(uuid())
  instructorId       String              @map("instructor_id")
  title              String
  slug               String              @unique
  description        String?
  isActive           Boolean             @default(true) @map("is_active")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  courses            Course[]
  examCurriculums    ExamCurriculum[]
  examMarkingDomains ExamMarkingDomain[]
  examSpecialties    ExamSpecialty[]
  instructor         Instructor          @relation(fields: [instructorId], references: [id])

  @@map("exams")
}

model Course {
  id              String         @id @default(uuid())
  examId          String         @map("exam_id")
  instructorId    String         @map("instructor_id")
  title           String
  description     String?
  style           CourseStyle    @default(RANDOM)
  price3Months    Decimal        @map("price_3_months") @db.Decimal(10, 2)
  price6Months    Decimal        @map("price_6_months") @db.Decimal(10, 2)
  price12Months   Decimal        @map("price_12_months") @db.Decimal(10, 2)
  credits3Months  Int            @map("credits_3_months")
  credits6Months  Int            @map("credits_6_months")
  credits12Months Int            @map("credits_12_months")
  isPublished     Boolean        @default(false) @map("is_published")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  infoPoints      String[]       @default([]) @map("info_points")
  courseCases     CourseCase[]
  exam            Exam           @relation(fields: [examId], references: [id], onDelete: Cascade)
  instructor      Instructor     @relation(fields: [instructorId], references: [id])
  subscriptions   Subscription[]

  @@map("courses")
}

model CourseCase {
  id              String             @id @default(uuid())
  courseId        String             @map("course_id")
  title           String
  diagnosis       String
  patientName     String             @map("patient_name")
  patientAge      Int                @map("patient_age")
  patientGender   PatientGender      @map("patient_gender")
  description     String
  isFree          Boolean            @default(false) @map("is_free")
  displayOrder    Int                @map("display_order")
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  caseCurriculums CaseCurriculum[]
  caseSpecialties CaseSpecialty[]
  caseTabs        CaseTab[]
  course          Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  markingCriteria MarkingCriterion[]
  simulation      Simulation?

  @@map("course_cases")
}

model MarkingCriterion {
  id              String        @id @default(uuid())
  courseCaseId    String        @map("course_case_id")
  markingDomainId String        @map("marking_domain_id")
  text            String
  points          Int           @default(0)
  displayOrder    Int           @map("display_order")
  createdAt       DateTime      @default(now()) @map("created_at")
  courseCase      CourseCase    @relation(fields: [courseCaseId], references: [id], onDelete: Cascade)
  markingDomain   MarkingDomain @relation(fields: [markingDomainId], references: [id], onDelete: Cascade)

  @@map("marking_criteria")
}

model CaseTab {
  id           String      @id @default(uuid())
  courseCaseId String      @map("course_case_id")
  tabType      CaseTabType @map("tab_type")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  content      String[]    @default([])
  courseCase   CourseCase  @relation(fields: [courseCaseId], references: [id], onDelete: Cascade)

  @@unique([courseCaseId, tabType])
  @@map("case_tabs")
}

model Simulation {
  id                 String              @id @default(uuid())
  courseCaseId       String              @unique @map("course_case_id")
  casePrompt         String              @map("case_prompt")
  openingLine        String              @map("opening_line")
  timeLimitMinutes   Int                 @map("time_limit_minutes")
  voiceModel         VoiceModel          @map("voice_model")
  warningTimeMinutes Int?                @map("warning_time_minutes")
  creditCost         Int                 @default(1) @map("credit_cost")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  llmProviderKey     String?             @map("llm_provider_key")
  sttProviderKey     String?             @map("stt_provider_key")
  ttsProviderKey     String?             @map("tts_provider_key")
  simulationAttempts SimulationAttempt[]
  courseCase         CourseCase          @relation(fields: [courseCaseId], references: [id], onDelete: Cascade)

  @@map("simulations")
}

model SimulationAttempt {
  id               String     @id @default(uuid())
  studentId        String     @map("student_id")
  simulationId     String     @map("simulation_id")
  startedAt        DateTime   @map("started_at")
  endedAt          DateTime?  @map("ended_at")
  durationSeconds  Int?       @map("duration_seconds")
  isCompleted      Boolean    @default(false) @map("is_completed")
  score            Decimal?   @db.Decimal(5, 2)
  aiFeedback       Json?      @map("ai_feedback")
  transcript       Json?
  createdAt        DateTime   @default(now()) @map("created_at")
  correlationToken String?    @unique
  aiPrompt         Json?      @map("ai_prompt")
  minutesBilled    Int?       @default(0) @map("minutes_billed")
  simulation       Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade)
  student          Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("simulation_attempts")
}

model Payment {
  id                   String        @id @default(uuid())
  studentId            String        @map("student_id")
  stripePaymentId      String        @unique @map("stripe_payment_id")
  amount               Decimal       @db.Decimal(10, 2)
  currency             String        @default("USD")
  paymentType          PaymentType   @map("payment_type")
  paymentStatus        PaymentStatus @map("payment_status")
  courseId             String?       @map("course_id")
  subscriptionDuration Int?          @map("subscription_duration")
  creditsAmount        Int?          @map("credits_amount")
  createdAt            DateTime      @default(now()) @map("created_at")
  student              Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subscription         Subscription?

  @@map("payments")
}

model Subscription {
  id             String   @id @default(uuid())
  studentId      String   @map("student_id")
  courseId       String   @map("course_id")
  paymentId      String   @unique @map("payment_id")
  durationMonths Int      @map("duration_months")
  startDate      DateTime @map("start_date") @db.Date
  endDate        DateTime @map("end_date") @db.Date
  isActive       Boolean  @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  course         Course   @relation(fields: [courseId], references: [id])
  payment        Payment  @relation(fields: [paymentId], references: [id])
  student        Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model CreditTransaction {
  id              String                  @id @default(uuid())
  studentId       String                  @map("student_id")
  transactionType CreditTransactionType   @map("transaction_type")
  amount          Int
  balanceAfter    Int                     @map("balance_after")
  sourceType      CreditTransactionSource @map("source_type")
  sourceId        String?                 @map("source_id")
  description     String?
  expiresAt       DateTime?               @map("expires_at")
  createdAt       DateTime                @default(now()) @map("created_at")
  student         Student                 @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("credit_transactions")
}

model Specialty {
  id              String          @id @default(uuid())
  name            String          @unique
  createdAt       DateTime        @default(now()) @map("created_at")
  caseSpecialties CaseSpecialty[]
  examSpecialties ExamSpecialty[]

  @@map("specialties")
}

model Curriculum {
  id              String           @id @default(uuid())
  name            String           @unique
  createdAt       DateTime         @default(now()) @map("created_at")
  caseCurriculums CaseCurriculum[]
  examCurriculums ExamCurriculum[]

  @@map("curriculums")
}

model MarkingDomain {
  id                 String              @id @default(uuid())
  name               String              @unique
  createdAt          DateTime            @default(now()) @map("created_at")
  examMarkingDomains ExamMarkingDomain[]
  markingCriteria    MarkingCriterion[]

  @@map("marking_domains")
}

model ExamSpecialty {
  examId      String    @map("exam_id")
  specialtyId String    @map("specialty_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  exam        Exam      @relation(fields: [examId], references: [id], onDelete: Cascade)
  specialty   Specialty @relation(fields: [specialtyId], references: [id], onDelete: Cascade)

  @@id([examId, specialtyId])
  @@map("exam_specialties")
}

model ExamCurriculum {
  examId       String     @map("exam_id")
  curriculumId String     @map("curriculum_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  exam         Exam       @relation(fields: [examId], references: [id], onDelete: Cascade)

  @@id([examId, curriculumId])
  @@map("exam_curriculums")
}

model ExamMarkingDomain {
  examId          String        @map("exam_id")
  markingDomainId String        @map("marking_domain_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  exam            Exam          @relation(fields: [examId], references: [id], onDelete: Cascade)
  markingDomain   MarkingDomain @relation(fields: [markingDomainId], references: [id], onDelete: Cascade)

  @@id([examId, markingDomainId])
  @@map("exam_marking_domains")
}

model CaseSpecialty {
  courseCaseId String     @map("course_case_id")
  specialtyId  String     @map("specialty_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  courseCase   CourseCase @relation(fields: [courseCaseId], references: [id], onDelete: Cascade)
  specialty    Specialty  @relation(fields: [specialtyId], references: [id], onDelete: Cascade)

  @@id([courseCaseId, specialtyId])
  @@map("case_specialties")
}

model CaseCurriculum {
  courseCaseId String     @map("course_case_id")
  curriculumId String     @map("curriculum_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  courseCase   CourseCase @relation(fields: [courseCaseId], references: [id], onDelete: Cascade)
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)

  @@id([courseCaseId, curriculumId])
  @@map("case_curriculums")
}

enum CourseStyle {
  RANDOM
  STRUCTURED
}

enum PatientGender {
  MALE
  FEMALE
  OTHER
}

enum VoiceModel {
  VOICE_1
  VOICE_2
}

enum CaseTabType {
  DOCTORS_NOTE
  PATIENT_SCRIPT
  MEDICAL_NOTES
}

enum PaymentType {
  SUBSCRIPTION
  CREDITS
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum CreditTransactionType {
  CREDIT
  DEBIT
}

enum CreditTransactionSource {
  SUBSCRIPTION
  PURCHASE
  SIMULATION
  MANUAL
}
